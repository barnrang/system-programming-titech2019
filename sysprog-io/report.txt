# [注意]
# 下記の # で始まるコメント行を変更（修正，削除）しないこと．
# 課題Nの回答は，### ExerciseN ### のコメント行の下の領域に記述して下さい．

### ID ### 学籍番号を「NN_NNNNN」のように書いて下さい

### Email ### mメールアドレスを書いて下さい

### Name ### 氏名を「東工 太郎」のように書いて下さい

### Exercise1 ### 課題1

Test1 正しく実行しました



### Exercise2 ### 課題2

4194304        1.19 real         0.00 user         0.49 sys
524288         0.18 real         0.00 user         0.17 sys
65536          0.20 real         0.01 user         0.18 sys
8192           0.46 real         0.12 user         0.34 sys
1024           2.61 real         0.96 user         1.64 sys
128           19.94 real         7.72 user        12.14 sys
116          157.79 real        63.92 user        93.72 sys


### Exercise3 ### 課題3

Test3 正しく実行しました


### Exercise4 ### 課題4

4194304        0.26 real         0.01 user         0.25 sys
524288         0.19 real         0.01 user         0.18 sys
65536          0.22 real         0.02 user         0.19 sys
8192           0.47 real         0.16 user         0.30 sys
1024           0.80 real         0.36 user         0.42 sys
128            1.72 real         1.29 user         0.42 sys
116            9.01 real         8.52 user         0.46 sys


### ExerciseA ### 発展課題A

make testA 正しく実行しました。


### ExerciseB ### 発展課題B

ファイルの内容を追加してみて正しく更新しました。


### ExerciseC ### 発展課題C

FILE *stream;
printf("%d\n", stream->_bf._size);
を使って large.bin読み込んだら 4096 bytes でした。

まず、標準ライブラリ使うとkernelでの実行時間はほぼ同じと思います。それは内部ブッファ長(4096 bytes)が変わらないからです。バッファー小さい時userの時間かかるのは値をコピーする時間でしょう。

buffer_size 4096, 2048 を指定して実行してみると 
4096 
0.75 real         0.24 user         0.50 sys
-l 0.70 real         0.28 user         0.41 sys

2048
1.69 real         0.49 user         1.01 sys
-l 0.78 real         0.36 user         0.41 sys


-l 指定する時内部バッファサイズを勝手に入力のバッファーサイズにした
（つまり stream->_bf._size = buffer_size;)
バッファーサイズ2048で
-l 1.11 real         0.45 user         0.65 sys
これで前よりkernelでの時間がかかったみたいです。それでも、なぜまだ open より速いのは分かりません


### Comment ### 感想（採点対象外，好きに書いて下さい．）



### END ###
